一、创建版本库
	初始化一个Git仓库，使用git init命令。

	添加文件到Git仓库，分两步：
		1、使用命令git add <file>，注意，可反复多次使用，添加多个文件；把文件添加进去，实际上就是把文件修改添加到暂存区；
		2、使用命令git commit -m <message>，完成。实际上就是把暂存区的所有内容提交到当前分支。
二、时光机穿梭

	要随时掌握工作区的状态，使用git status命令。

	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
	2.1版本回退
		1、HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
		2、穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
		3、要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	2.2工作区和暂存区
		工作区（Working Directory）：电脑里能看到的目录learngit。
		版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
		https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0
	2.3管理修改
		跟踪修改:每次修改，如果不用git add到暂存区，那就不会加入到commit中。
	2.4撤销修改
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	2.5删除文件
		命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
		git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
三、远程仓库
	Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。
	3.1添加远程库
	先有本地库，后有远程库的时候，如何关联远程库
		1、要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
		2、关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
		3、此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
		4、分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！
	3.2从远程库克隆
		